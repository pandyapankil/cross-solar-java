From 02ea5f05e107fb44ac5afb8c06ec1e917ab4d195 Mon Sep 17 00:00:00 2001
From: Pankil Pandya <pandyapankil022@gmail.com>
Date: Mon, 16 Jul 2018 01:11:45 +0530
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 .../techtrial/controller/PanelController.java | 44 ++++++++++++-
 .../techtrial/dto/DailyElectricity.java       | 10 +++
 .../techtrial/model/HourlyElectricity.java    |  8 +--
 .../com/crossover/techtrial/model/Panel.java  | 43 ++++++++++---
 src/main/resources/application.properties     |  4 +-
 .../controller/PanelControllerTest.java       | 64 ++++++++++++++++++-
 6 files changed, 155 insertions(+), 18 deletions(-)

diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..f452f9f 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -5,10 +5,17 @@ import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.web.PageableDefault;
 import org.springframework.http.ResponseEntity;
@@ -40,7 +47,9 @@ public class PanelController {
    */
   @PostMapping(path = "/api/register")
   public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
+	if (panel == null) {
+		  panelService.register(panel);
+	}
     return  ResponseEntity.accepted().build();
   }
   
@@ -55,6 +64,10 @@ public class PanelController {
   public ResponseEntity<?> saveHourlyElectricity(
       @PathVariable(value = "panel-serial") String panelSerial, 
       @RequestBody HourlyElectricity hourlyElectricity) {
+	  hourlyElectricity.setPanel(panelService.findBySerial(panelSerial));
+	  if (hourlyElectricity.getPanel() == null) {
+		  return ResponseEntity.notFound().build();
+	  }
     return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
   }
    
@@ -64,7 +77,7 @@ public class PanelController {
   
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
   public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
+      @PathVariable(value = "panel-serial") String panelSerial,
       @PageableDefault(size = 5,value = 0) Pageable pageable) {
     Panel panel = panelService.findBySerial(panelSerial);
     if (panel == null) {
@@ -90,6 +103,33 @@ public class PanelController {
      * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
      * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
      */
+    Panel panel = panelService.findBySerial(panelSerial);
+    if (panel == null)
+      return ResponseEntity.notFound().build();
+
+    Page<HourlyElectricity> pageOfAllHourlyElectricityUntilYesterday = hourlyElectricityService.getAllHourlyElectricityByPanelId(panel.getId(), PageRequest.of(0, 24));
+    List<HourlyElectricity> listOfAllHourlyElectricityUntilYesterday = pageOfAllHourlyElectricityUntilYesterday.getContent();
+
+    Map<LocalDate, DailyElectricity> dailyElectricityMap = new HashMap<>();
+
+    if (listOfAllHourlyElectricityUntilYesterday != null && !listOfAllHourlyElectricityUntilYesterday.isEmpty()) {
+        for (HourlyElectricity hourlyElectricity : listOfAllHourlyElectricityUntilYesterday) {
+            LocalDateTime readingDateTime = hourlyElectricity.getReadingAt();
+            LocalDate readingDate = readingDateTime.toLocalDate();
+            DailyElectricity dailyElectricity = dailyElectricityMap.getOrDefault(readingDate, new DailyElectricity());
+            dailyElectricity.setSum(hourlyElectricity.getGeneratedElectricity() + dailyElectricity.getSum());
+            if (hourlyElectricity.getGeneratedElectricity() < dailyElectricity.getMin())
+                dailyElectricity.setMin(hourlyElectricity.getGeneratedElectricity());
+            if (hourlyElectricity.getGeneratedElectricity() > dailyElectricity.getMax())
+                dailyElectricity.setMax(hourlyElectricity.getGeneratedElectricity());
+            if (dailyElectricity.getSum() != 0)
+                dailyElectricity.setAverage((double) Long.divideUnsigned(dailyElectricity.getSum(), 24));
+            dailyElectricity.setDate(readingDate);
+            dailyElectricityMap.put(readingDate, dailyElectricity);
+        }
+    }
+
+    dailyElectricityForPanel.addAll(dailyElectricityMap.values());
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
index b0e0ea9..17aade4 100644
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
@@ -23,6 +23,16 @@ public class DailyElectricity implements Serializable {
   
   private Long max;
 
+  public DailyElectricity(LocalDate date, Long sum, Double average, Long min, Long max) {
+	this.date = date;
+	this.sum = sum;
+	this.average = average;
+	this.min = min;
+	this.max = max;
+  }
+
+  public  DailyElectricity(){}
+
   public LocalDate getDate() {
     return date;
   }
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..d2de0c9 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -28,18 +28,18 @@ public class HourlyElectricity implements Serializable {
   
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+  private Long id;
   
   @JsonIgnore
   @ManyToOne
   @JoinColumn(name = "panel_id", referencedColumnName = "id")
-  Panel panel;
+  private Panel panel;
   
   @Column(name = "generated_electricity")
-  Long generatedElectricity;
+  private Long generatedElectricity;
   
   @Column(name = "reading_at")
-  LocalDateTime readingAt;
+  private LocalDateTime readingAt;
 
   public Long getId() {
     return id;
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..43888c2 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -24,23 +24,37 @@ public class Panel implements Serializable {
 
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
-  Long id;
+  private Long id;
 
   @NotNull
   @Column(name = "serial")
-  String serial;
+  private String serial;
 
   @Column(name = "longitude")
-  Double longitude;
+  private Double longitude;
 
   @Column(name = "latitude")
-  Double latitude;
+  private Double latitude;
 
   @Nullable
   @Column(name = "brand")
-  String brand;
+  private String brand;
 
-  public Long getId() {
+
+
+  public Panel(Long id, @NotNull String serial, Double longitude, Double latitude, String brand) {
+	this.id = id;
+	this.serial = serial;
+	this.longitude = longitude;
+	this.latitude = latitude;
+	this.brand = brand;
+}
+
+  public Panel() {
+
+  }
+
+public Long getId() {
     return id;
   }
 
@@ -52,7 +66,10 @@ public class Panel implements Serializable {
     return serial;
   }
 
-  public void setSerial(String serial) {
+  public void setSerial(String serial) throws Exception{
+
+    if (serial == null) throw new Exception();
+    if (serial.length() < 16) throw new Exception("Serial number must be 16 characters long");
     this.serial = serial;
   }
 
@@ -60,7 +77,8 @@ public class Panel implements Serializable {
     return longitude;
   }
 
-  public void setLongitude(Double longitude) {
+  public void setLongitude(Double longitude) throws Exception{
+    if (getDecimalPlaces(longitude) != 6) throw new Exception("Longitude must be of 6 decimal places!");
     this.longitude = longitude;
   }
 
@@ -68,7 +86,8 @@ public class Panel implements Serializable {
     return latitude;
   }
 
-  public void setLatitude(Double latitude) {
+  public void setLatitude(Double latitude) throws Exception{
+    if (getDecimalPlaces(latitude) != 6) throw new Exception("Latitude must be of 6 decimal places!");
     this.latitude = latitude;
   }
 
@@ -144,4 +163,10 @@ public class Panel implements Serializable {
     return "Panel [id=" + id + ", serial=" + serial + ", longitude=" + longitude + ", latitude="
         + latitude + ", brand=" + brand + "]";
   }
+
+  private int getDecimalPlaces(Double number) {
+    String str = String.valueOf(number);
+    int decimalPlaces = str.length() - (str.indexOf(".") + 1);
+    return decimalPlaces > 0 ? decimalPlaces : 0;
+  }
 }
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..1b606e8 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,8 +1,8 @@
 #PLEASE TRY NOT TO CHANGE SETTINGS AND USE APPROPRIATE ENV VARIABLES and DATABASE NAME AS CONFIGURED BELOW
 #Database connection Parameters
-spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
+spring.datasource.url= jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=root
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..abd93f0 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,6 +1,10 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import java.time.LocalDateTime;
+import java.util.List;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -12,6 +16,7 @@ import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
@@ -50,7 +55,7 @@ public class PanelControllerTest {
             + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
     ResponseEntity<Panel> response = template.postForEntity(
         "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
+    Assert.assertEquals(202,response.getStatusCode());
   }
 
   private HttpEntity<Object> getHttpEntity(Object body) {
@@ -58,4 +63,61 @@ public class PanelControllerTest {
     headers.setContentType(MediaType.APPLICATION_JSON);
     return new HttpEntity<Object>(body, headers);
   }
+
+  @Test
+  public void testSaveHourlyElectricity() throws Exception{
+	  HttpEntity<Object> hourly = getHttpEntity(
+			  "{\"panel\":{\"id\": \"2\",\"generatedElectricity\":120, \"serial\":"
+			  + " \"232323\", \"longitude\": \"54.123232\","
+			  + " \"latitude\": \"54.123232\",\"brand\":\"tesla\"},"
+			  +"\"generatedElectricity\":120,"
+		      + "\"readingAt\":\""+LocalDateTime.now()+"\"}");
+		    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+		        "/api/panels/232323/hourly", hourly, HourlyElectricity.class);
+		    Assert.assertEquals(200,response.getStatusCode());
+  }
+
+  @Test
+  public void testErrorSaveHourlyElectricity() throws Exception{
+	  HttpEntity<Object> hourly = getHttpEntity(
+			  "{\"panel\":{\"id\": \"2\",\"generatedElectricity\":120, \"serial\":"
+			  + " \"545454\", \"longitude\": \"54.123232\","
+			  + " \"latitude\": \"54.123232\",\"brand\":\"tesla\"},"
+			  +"\"generatedElectricity\":120,"
+		      + "\"readingAt\":\""+LocalDateTime.now()+"\"}");
+		    ResponseEntity<HourlyElectricity> response = template.postForEntity(
+		        "/api/panels/545454/hourly", hourly, HourlyElectricity.class);
+		    Assert.assertEquals(404,response.getStatusCode());
+  }
+
+  @Test
+  public void testHourlyElectricity() throws Exception{
+	  ResponseEntity<HourlyElectricity> response = template.
+			  getForEntity("/api/panels/232323/hourly", null);
+	  Assert.assertEquals(200,response.getStatusCode());
+  }
+
+  @Test
+  public void testErrorHourlyElectricity() throws Exception{
+	  ResponseEntity<HourlyElectricity> response = template.
+			  getForEntity("/api/panels/545454/hourly", null);
+	  Assert.assertEquals(404,response.getStatusCode());
+  }
+
+
+  @Test
+  public void testAllDailyElectricityFromYesterday() throws Exception{
+	  ResponseEntity<List<DailyElectricity>> response = template.
+			  getForEntity("/api/panels/1234567890123456/daily", null);
+
+	  Assert.assertEquals(200,response.getStatusCode());
+  }
+
+  @Test
+  public void testAllDailyElectricityFromYesterdayValues() throws Exception{
+	  ResponseEntity<String> response = template.
+			  getForEntity("/api/panels/1234567890123456/daily", String.class);
+	  String result = "[{\"date\":\"2018-01-31\",\"sum\":951,\"average\":158.5,\"min\":100,\"max\":310},{\"date\":\"2018-01-08\",\"sum\":840,\"average\":168.0,\"min\":100,\"max\":310}]";
+	  Assert.assertEquals(result,response.getBody());
+  }
 }
-- 
2.18.0.windows.1

